args: []
artifacts:
  - name: authorized_keys
    type: query
    description: "Collect authorized_keys artifacts"
    queries:
      - "select * from authorized_keys"

  - name: process_list
    type: query
    description: "List all runing processes"
    queries:
      - "select cmdline,cwd,disk_bytes_read,disk_bytes_written,egid,euid,gid,name,nice,on_disk,parent,processes.path,md5,pgroup,pid,resident_size,root,sgid,start_time,state,suid,system_time,threads,total_size,uid,user_time,wired_size from processes JOIN hash USING (path)"
    maps:
      - from: start_time
        to: "@timestamp"
        modifier:
          name: epoch_to_iso

  - name: startup_items
    type: query
    description: "Collect startup items"
    queries:
      - "select * from startup_items"

  - name: sudoers
    type: query
    description: "Collect rules for the sudoers"
    queries:
      - "select * from sudoers"

  - name: suid_bin
    type: query
    description: "Get information about executables with SUID set"
    queries:
      - "SELECT path,md5,username,groupname,permissions FROM suid_bin JOIN hash USING (path)"

  - name: system_info
    type: query
    description: "Get general information about system"
    queries:
      - "select * from system_info"

  - name: users
    type: query
    description: "List all local users"
    queries:
      - "select * from groups join user_groups using (gid) join users using (uid)"

  - name: groups
    type: query
    description: "List all local groups"
    queries:
      - "select * from groups"

  - name: apt_sources
    type: query
    description: "Get sources for apt package manager (Debian based)"
    queries:
      - "select * from apt_sources"

  - name: arp_cache
    type: query
    description: "Get arp table cache"
    queries:
      - "select * from arp_cache"

  - name: crontab
    type: query
    description: "Get crontab for system and all users"
    queries:
      - "select * from crontab"

  - name: deb_packages
    type: query
    description: "Get installed packages (Debian based)"
    queries:
      - "select * from deb_packages"

  # Replaced by the 'file_list' artifact using 'command' artifact type instead of 'query'.
  # This is because the file table in osquery isn't meant to be used to list all files on the file system and it returns limitted results

  # - name: file_list
  #   type: query
  #   description: "Get metadata for files on system"
  #   queries:
  #     - 'select * from file where path like "/bin/%%"'
  #     - 'select * from file where path like "/boot/%%"'
  #     - 'select * from file where path like "/dev/%%"'
  #     - 'select * from file where path like "/etc/%%"'
  #     - 'select * from file where path like "/home/%%"'
  #     - 'select * from file where path like "/init/%%"'
  #     - 'select * from file where path like "/lib/%%"'
  #     - 'select * from file where path like "/lib32/%%"'
  #     - 'select * from file where path like "/lib64/%%"'
  #     - 'select * from file where path like "/libx32/%%"'
  #     - 'select * from file where path like "/lost+found/%%"'
  #     - 'select * from file where path like "/media/%%"'
  #     - 'select * from file where path like "/nonexistent/%%"'
  #     - 'select * from file where path like "/opt/%%"'
  #     - 'select * from file where path like "/root/%%"'
  #     - 'select * from file where path like "/run/%%"'
  #     - 'select * from file where path like "/sbin/%%"'
  #     - 'select * from file where path like "/snap/%%"'
  #     - 'select * from file where path like "/srv/%%"'
  #     - 'select * from file where path like "/tmp/%%"'
  #     - 'select * from file where path like "/usr/%%"'
  #     - 'select * from file where path like "/var/%%"'
  #   maps:
  #     - from: ctime
  #       to: "@timestamp"
  #       modifier:
  #         name: epoch_to_iso

  - name: docker_containers
    type: query
    description: "Get information about docker containers"
    queries:
      - "select * from docker_containers"
    maps:
      - from: created
        to: "@timestamp"
        modifier:
          name: epoch_to_iso

  - name: etc_hosts
    type: query
    description: "Get entries in /etc/hosts"
    queries:
      - "select * from etc_hosts"

  - name: interface_addresses
    type: query
    description: "Get information regarding network interfaces"
    queries:
      - "select * from interface_addresses"

  - name: iptables
    type: query
    description: "Get iptables rules"
    queries:
      - "select * from iptables"

  - name: last
    type: query
    description: "Get the latest successful logins (/var/log/wtmp)"
    queries:
      - "select * from last"
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: epoch_to_iso

  - name: netstat
    type: query
    description: "Get network sockets information (same as command 'netstat')"
    queries:
      - "select pid,processes.path as process_path,processes.cmdline,family,protocol,local_address,remote_address,local_port,remote_port,process_open_sockets.state from process_open_sockets JOIN processes USING (pid)"

  - name: logged_in_users
    type: query
    description: "Get the currently logged-in users"
    queries:
      - "select * from logged_in_users"
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: epoch_to_iso

  - name: mounts
    type: query
    description: "Get information about the mounted devices"
    queries:
      - "select * from mounts"

  - name: os_version
    type: query
    description: "Get information about the OS destro and version"
    queries:
      - "select * from os_version"

  - name: process_envs
    type: query
    description: "Get each process environment variables"
    queries:
      - 'select pid,cmdline,group_concat(env) as env_variables from (select pid,cmdline,key || "=" || value as env from processes join process_envs using (pid)) group by pid'

  - name: process_open_files
    type: query
    description: "Get opened files for each process"
    queries:
      - "select pid,cmdline,fd,process_open_files.path from process_open_files join processes using (pid)"

  - name: routes
    type: query
    description: "Get routing table entries"
    queries:
      - "select * from routes"

  - name: rpm_packages
    type: query
    description: "Get installed packages (RedHat based)"
    queries:
      - "select * from rpm_packages"
    maps:
      - from: install_time
        to: "@timestamp"
        modifier:
          name: epoch_to_iso

  - name: selinux_settings
    type: query
    description: "Get selinux configurations"
    queries:
      - "select * from selinux_settings"

  - name: shell_history
    type: query
    description: "Get shell history for all users"
    queries:
      - "select uid,time,command,history_file from users join shell_history using (uid)"
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: epoch_to_iso

  - name: ssh_configs
    type: query
    description: "Get SSH client configurations"
    queries:
      - "select * from ssh_configs"

  - name: uptime
    type: query
    description: "Get system uptime"
    queries:
      - "select * from uptime"

  - name: yum_sources
    type: query
    description: "Get package manager sources (RedHat based)"
    queries:
      - "select * from yum_sources"

  - name: shadow
    type: query
    description: "Get information about user from /etc/shadow such as enabled accounts, password algorithm, etc"
    queries:
      - "select * from shadow"

  - name: logs
    type: collection
    description: "Collect system logs"
    paths:
      - "/var/log/**/*"
      - "/home/*/.vnc/*.log"

  - name: bad_logins
    type: command
    description: "Get failed logins (/var/log/btmp)"
    commands:
      - "lastb --time-format=iso | head -n -1"
    timeout: 30
    regex: '(?P<username>[^ ]+)[ ]+?(?P<tty>[^ ]+)[ ]+?(?P<src_ip>[^ ]+)?[ ]+?(?P<login_time>[^ ]+) - (?P<logout_time>[^ ]+)[ ]+?(\()?(?P<duration>[^ ]+)(\))'
    maps:
      - from: login_time
        to: "@timestamp"
        modifier:
          name: datetime_to_iso
          parameters:
            input_time_format: "%Y-%m-%dT%H:%M:%S%:z"
            output_time_format: "%Y-%m-%d %H:%M:%S"
      - from: logout_time
        to: "logout_time"
        modifier:
          name: datetime_to_iso
          parameters:
            input_time_format: "%Y-%m-%dT%H:%M:%S%:z"
            output_time_format: "%Y-%m-%d %H:%M:%S"

  - name: file_list
    type: command
    description: "List file info using 'find' command"
    commands:
      - 'find / -not \( -path /proc -prune \) -not \( -path /sys -prune \) -not \( -path /mnt -prune \) -printf "%p|%h|%f|%D|%l|%s|%y|%m|%n|%i|%G|%U|%A@|%T@|%C@\\n"'
    regex: "(?P<path>[^|]+)\\|(?P<directory>[^|]+)?\\|(?P<filename>[^|]+)\\|(?P<device>[^|]+)\\|(?P<symlink>[^|]+)?\\|(?P<size>[^|]+)\\|(?P<type>[^|]+)\\|(?P<mode>[^|]+)\\|(?P<hard_links>[^|]+)\\|(?P<inode>[^|]+)\\|(?P<gid>[^|]+)\\|(?P<uid>[^|]+)\\|(?P<atime>[^|]+)\\|(?P<mtime>[^|]+)\\|(?P<ctime>[^|]+)"
    timeout: 600
    maps:
      - from: ctime
        to: "@timestamp"
        modifier:
          name: epoch_to_iso
      - from: btime
        to: btime
        modifier:
          name: epoch_to_iso
      - from: atime
        to: atime
        modifier:
          name: epoch_to_iso
      - from: mtime
        to: mtime
        modifier:
          name: epoch_to_iso
      - from: size
        to: size
        modifier:
          name: to_int
      - from: inode
        to: inode
        modifier:
          name: to_int
      - from: gid
        to: gid
        modifier:
          name: to_int
      - from: uid
        to: uid
        modifier:
          name: to_int
      - from: hard_links
        to: hard_links
        modifier:
          name: to_int
  - name: nginx_access
    type: parse
    description: "Nginx access logs"
    paths:
      - /var/log/nginx/access.*
    regex: '(?P<c_ip>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}) - (?P<remote_user>[^ ]+) \[(?P<time>[0-9]{2}/[a-zA-Z]{3}/[0-9]{4}:[0-9]{2}:[0-9]{2}:[0-9]{2} \+[0-9]{4})\] "(?P<method>[A-Z]+)?[ ]?(?P<uri>.*?)[ ]?(HTTP/(?P<http_prot>[0-9\.]+))?" (?P<status_code>[0-9]{3}) (?P<body_bytes_sent>[0-9]+) "(?P<referer>.*?)" "(?P<user_agent>.*?)"'
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: datetime_to_iso
          parameters:
            input_time_format: "%d/%b/%Y:%H:%M:%S %z"
            output_time_format: "%Y-%m-%d %H:%M:%S"
      - from: status_code
        to: status_code
        modifier:
          name: to_int
      - from: body_bytes_sent
        to: body_bytes_sent
        modifier:
          name: to_int
  - name: auth_log
    type: parse
    description: "Auth logs /var/log/auth.* (Debian based)"
    paths:
      - /var/log/auth.*
    regex: '(?P<time>[A-Z][a-z]{2}[ ]{1,}[0-9]{1,2}[ ]{1,2}[0-9]{1,2}:[0-9]{2}:[0-9]{2}) (?P<hostname>[a-zA-Z0-9_\-]+) (?P<service>[a-zA-Z0-9_\-\]\(\)=\./]+)\[?(?P<pid>[0-9]+)?\]?: (?P<msg>.*)'
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: time_without_year_to_iso
          parameters:
            input_time_format: "%b %d %H:%M:%S"
            output_time_format: "%Y-%m-%d %H:%M:%S"
      - from: pid
        to: "pid"
        modifier:
          name: to_int
  - name: secure_log
    type: parse
    description: "Secure logs /var/log/secure* (RedHat based)"
    paths:
      - /var/log/secure*
    regex: '(?P<time>[A-Z][a-z]{2}[ ]{1,}[0-9]{1,2}[ ]{1,2}[0-9]{1,2}:[0-9]{2}:[0-9]{2}) (?P<hostname>[a-zA-Z0-9_\-]+) (?P<service>[a-zA-Z0-9_\-\]\(\)=\./]+)\[?(?P<pid>[0-9]+)?\]?: (?P<msg>.*)'
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: time_without_year_to_iso
          parameters:
            input_time_format: "%b %d %H:%M:%S"
            output_time_format: "%Y-%m-%d %H:%M:%S"
            local_timezone: true
      - from: pid
        to: "pid"
        modifier:
          name: to_int
  - name: syslog_log
    type: parse
    description: "Syslog logs /var/log/syslog* (Debian based)"
    paths:
      - /var/log/syslog*
    regex: '(?P<time>[A-Z][a-z]{2}[ ]{1,}[0-9]{1,2}[ ]{1,2}[0-9]{1,2}:[0-9]{2}:[0-9]{2}) (?P<hostname>[a-zA-Z0-9_\-]+) (?P<service>[a-zA-Z0-9_\-\]\(\)=\./]+)\[?(?P<pid>[0-9]+)?\]?: (?P<msg>.*)'
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: time_without_year_to_iso
          parameters:
            input_time_format: "%b %d %H:%M:%S"
            output_time_format: "%Y-%m-%d %H:%M:%S"
      - from: pid
        to: "pid"
        modifier:
          name: to_int
  - name: messages_log
    type: parse
    description: "Messages logs /var/log/messages* (RedHat based)"
    paths:
      - /var/log/messages*
    regex: '(?P<time>[A-Z][a-z]{2}[ ]{1,}[0-9]{1,2}[ ]{1,2}[0-9]{1,2}:[0-9]{2}:[0-9]{2}) (?P<hostname>[a-zA-Z0-9_\-]+) (?P<service>[a-zA-Z0-9_\-\]\(\)=\./]+)\[?(?P<pid>[0-9]+)?\]?: (?P<msg>.*)'
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: time_without_year_to_iso
          parameters:
            input_time_format: "%b %d %H:%M:%S"
            output_time_format: "%Y-%m-%d %H:%M:%S"
            local_timezone: true
      - from: pid
        to: "pid"
        modifier:
          name: to_int
  - name: audit_log
    type: parse
    description: "Audit logs /var/log/audit/audit*"
    paths:
      - /var/log/audit/audit*
    regex: 'type=(?P<type>[A-Za-z0-9_]+) msg=audit\((?P<time>[0-9]+)\.[0-9]+:[0-9]+\): (?P<record>.*)'
    maps:
      - from: time
        to: "@timestamp"
        modifier:
          name: epoch_to_iso
          parameters:
            output_time_format: "%Y-%m-%d %H:%M:%S"
